Käjä
* Luento 3
** Prosessi
*** Koostuu ohjelmakoodista ja datasta koodin suoritukseen liittyen
*** PCB
    - identifier
    - tila
    - prioriteetti
    - PC
    - muisti pointterit    
    - contekstillinen data
    - I/O status
    - accounting Information
*** Trace
    Kertoo, missä muistiosoitteissa prosessi on komentoja suorittanu
*** Tila Mallit
**** Kaksitilainen prosessimalli
    - running
    - not running
**** Viisitilainen prosessimalli
|---------+-----+-------------+----------+------------+---------|
|         | New | Ready       | Running  | Blocked    | Exit    |
|---------+-----+-------------+----------+------------+---------|
| New     |     | Admit       |          |            |         |
|---------+-----+-------------+----------+------------+---------|
| Ready   |     |             | Dispatch |            |         |
|---------+-----+-------------+----------+------------+---------|
| Running |     | Timeout     |          | Event wait | Release |
|---------+-----+-------------+----------+------------+---------|
| Blocked |     | Event occur |          |            |         |
|---------+-----+-------------+----------+------------+---------|
| Exit    |     |             |          |            |         |
|---------+-----+-------------+----------+------------+---------|
**** Viisitilainen prosessimalli suspend tilalla
|---------+-----+----------+----------+---------+------------+---------|
|         | New | Ready    | Running  | Suspend | Blocked    | Exit    |
|---------+-----+----------+----------+---------+------------+---------|
| New     |     | Admit    |          |         |            |         |
|---------+-----+----------+----------+---------+------------+---------|
| Ready   |     |          | Dispatch |         |            |         |
|---------+-----+----------+----------+---------+------------+---------|
| Running |     | Timeout  |          |         | Event wait | Release |
|---------+-----+----------+----------+---------+------------+---------|
| Suspend |     | Activate |          |         |            |         |
|---------+-----+----------+----------+---------+------------+---------|
| Blocked |     |          |          | Suspend |            |         |
|---------+-----+----------+----------+---------+------------+---------|
| Exit    |     |          |          |         |            |         |
|---------+-----+----------+----------+---------+------------+---------|
     
*** Prosessin synty
    - OS asettaa uniikin IDn
      - allokoi muistin
	- initialosoi PCBn
	  - asettaa tarvitut linkitykset?
	    - luo ja laajentaa tietorakenteita
**** Process spawning
     Kun os luo prosessin toisen prosessin pyynnöstä
**** Parent process
     Luonut prosessi
**** Child process
     Luotu prosessi
*** Suspended process
**** Mitä ominaisuuksia
    - Ei heti valmis suoritukseen
    - saattaa olla odottamassa tapahtumaa
    - voi olla tilassa, omasta, isännän tai OS ohjeesta
    - poistuu tilasta vasta kunnes ^ pyytää sitä

**** Syitä
     -Swapping
     - Muu os syy
     - Interaktiivisen käyttäjän pyynnöstä
     - Ajastus
     - Isännän pyynnöstä
*** I/O taulukot
    - Pitää kirjaa IO laitteista
      - Huolehtii, että vain yksi prosessi käpistelee io laitetta
	- jos io operaatio käynnissä tulee tietää
	  - IO operaation status
	  - sijainti päämuistista, joka lähde tai kohde io
            operaatiolle

*** Tiedostotaulut
    - FS pitää kirjaa tiedostojen olemassaolosta
    - OS ei tiedä juuri tästä
**** Tarjoaa tietoa
     - tiedoston olemassaolo
     - sijainti toissijaisessa muistissa
     - nykyinen status
     - muut atribuutit
*** Prosessitaulu
    - prosessien hallintaa varten
    - tieto myös muistista, I/O ja filuista jotenkin
    - OSsän tulee päästä näihin käsiksi ja ovat siten muistinhallinnan
      alaisia

      
*** Prosessikuvan data
    - Käyttäjän data
    - ohjelma
    - stack
    - PCB
*** Prosessin attribuutit
    - pid
    - isännän id
    - käyttäjäid
    - Käyttäjälle näkyvät rekisterit
    - kontrolli- ja status rekisterit
      - PC, tilakoodit, statusinfo

*** Suoritus modet
**** Usermode
     Käyttäjätila, ei etuoikeutettuja käskyjä, normi ohjelmat
**** Kernelmode
     Myös etuoikeutettuja käskyjä, kernel, enemmän oikkia
*** Prosessin vaihto
**** Interrupt - keskeytys
     Koska: suorituksen ulkoinen käsky
     Käyttö: reaktio asynkroniseen tapahtumaan
     - kellolaitekeskeytys, I/O keskeytys, muistivirhe
**** Trap - poikkeus
     Koska: liittyy nyt suoritettavaan komentoon
     Käyttö: Virheiden hallinta
**** Supervisior call
     Koska: erityinen pyyntö
     Käyttö: OS funktion kutsu
**** Mitä oikeesti tapahtuu
     1) tallennetaan prosessorin konteksti ?
     2) päivitetään nyt running-tilassa olevan  prosessin PCB
     3) siirretään PCB sopivaan jonoon
     4) valitaan toinen prosessi suoritukseen
     5) päivitetään valitun PCB
     6) päivitetään muistinhallinta
     7) palautetaan nyt suoritukseen menevän konteksti
*** Suoritustilan vaihto
**** jos ei keskeytyksia
     jatkaa lataamaan seuraavan tilan ja lataa seuraavan komennon
     ko. ohjelmasta 
**** jos on keskeytys
     asettaa PCn keskeytyksen käsittelijälle
     vaihtaa moden kernelmodeksi, jotta voidaan käsitellä
*** UNIX prosessi
**** UNIX prosessin tilat
***** User runnig
      Suoritetaan user modessa
***** Kernel Running
      Suoritetaan kernel modessa
***** Ready to run, in memory
      Valmiina suoritettavaksi heti kun kernel niin päättää
***** Asleep in memory
      Ei voida suorittaa ennen jotain tapahtumaa
***** Ready to run, Swapped
      valmis suoritukseen, mutta on swapatty
***** Sleeping, Swapped
      Odottaa tapahtumaa ja on swapatty
***** Preempted
      On palaamassa kernel modesta mutta kernel päättää välillä
      suorittaa toisen prosessin
***** Created
      Juuri luotu ja ei vielä valmis suoritukseen
***** Zombie
      Prosesia ei enää ole, mutta on jättänyt isännälle jäljen
**** prosessin kamat
***** User level content
      -Prosessi teksti
      -Prosessin data
      -Käyttäjän pino
      -Jaettu muisti
***** User level content
      -PC
      -Prosessorin status rekisteri
      -Stack pointer
      -Yleisiä rekietereitä
***** User level content
      -Prosessitaulu esiintymä (entry)
      -User area
      -prosessin alue - mapping of vierual and physical addresses
      -Kernel stack
**** Unix prosessin luonti
        1) Allokoitaan tila prosessitauluun
        2) Asetetaan uniikki ID
        3) Kopioidaan isännän prosessi-image, ilman jaettua muistia
        4) Kasvatetaan parentin omistamien filujen counttereita osoittamaan
           että luotu prosessi omistaa ne myös
        5) Asetetaan lapsiprosessi Ready to run tilaan 
        6) Palautta lapsen PIDn
**** Luonnin jälkeen
     Valitaan joku seuraavista
       - Pysytään paren prosessissa
       - Siirretään contolli lapsiprosessille
       - Siirretään suoritus toiselle prosessille	 

* Luento 4
** Thread
*** 2 ominaisuutta
    -Resurssien omistus
     Sisältää virtaalisen nimiavaruuden prosessiimagen säilömiseen
    -ajastus/suoritus
*** Theadin yleisominaisuuksia
    "Unit of dispatching"
     == thread tai lightweight process
     "unit of resource ownership"
      ==Prosessi

*** Useampi threadi yhdessä prosessissa
**** Threadiin kuuluu
     - Thread Control Block TCB
     - User Stack
     - Kernel Stack
**** Prosessiin kuuluu
     - PCB
     - User address space
     - Threadien tiedot TAI User- ja Kernel Stack
*** Hyödyt
    -Nopeempaa tehdä thread kuin prosessi
    -Nopeempi myös lopettaa thread kuin prosessi
    -Threadien välillä vaihto nopeempaa
    -Helpompo kommunikaatio threadien välillä
*** Mihin käytetään
    -Foreground ja background työskentelyyn
    -Asynkroniseen prosessointiin
    -Suorituksen nopeuttamiseen
    -Modulaariseen ohjelman struktuuriin
*** Huomioitavaa
    -Prosessin suspendaaminen suspendaa myös kaikki threadit
    -Prosessin lopettaminen lopettaa myös threadit

*** Päätilat
    -Running
    -Ready
    -Blocked
**** Liittyvät operaatiot
     -Spawn
     -Block
     -Unblock
     -Finish
*** Synkronisaatio threadien välillä
    On tarpeen synkronisoida
    - Threadeillä on yhteinen osoiteavaruus ja yhteiset resurssit
*** ULT ja KLT
**** ULT
***** Yleiset ominaisuudet
     -Hallinta by itse ohjelma
     -Kernel ei tiedä näistä mitään
     -Max yksi thread samaanaikaan
***** Hyödyt
      -Nopea vaihto - ei vaadi kernelin toimia
      -Ajastus ohjelmakohtaista
      -Toimii kaililla OSsillä
***** Haitat
      - Normalissa OS monet systeemikutsut on blocking
	- Blokkaa kaikki threadit eikä vaan yhtä
      - Ei toimi, jos halutaan maksimihyöty
***** Haittojen kierto
      -Jacketing, muunnetaan blocking systeemikutsu ei blokkaavaksi
      -Kirjoitetan ohelma useaksi prosessiksi
**** KLT
***** Yleiset ominaisuudet
      -Kernel hallitsee, ei itse prosessi
      -Esim windows toimii näin
***** Hyödyt
      -Usea thread voi pyöriä samanaikaisesti
      -Jos yksi blocked niin voidaan ajastaa joku muu toimimaan
      silloin
***** Haitat
      -Vaihto yhtä kidasta kuin prosessin vaihto


*** Windows prosessi
**** Prosessi
     -Entiteetti, joka vastaa käyttäjän taskia tai ohjelmaa, jolla on
     omat resurssit
***** Kentät
     PID
     Security descriptor
     base priority
     default affinity
     quota limit
     execution time
     I/O counters
     VM operation counters
     Exception/debugging ports
     Exit status
Services
     Create process
     Open process
     Query process info
     Set process info
     Terminate process
**** Thread
     -dispatchable unit of work
***** Kentät
      Thread id
      Thread context
      Dynamic priority
      Base priority
      Thread processor affinity
      Thread execution time
      Alert status
      Suspension count
      Impersonation token
      Termination port
      Thread exit status
Palelut
      Create
      open
      query thread info
      set thread info
      Current thread
      Terminate thread
      Get context
      Set context
      Suspend
      Resume
      Alert Thread
      Test thread alert
      Register termination port


**** Tilakaavio

|------------+--------------------+-------------+---------+------------+---------------+------------|
|            | Ready              | Standby     | Running | Terminated | Waiting       | Transition |
|------------+--------------------+-------------+---------+------------+---------------+------------|
| Ready      |                    | Pick to run |         |            |               |            |
|------------+--------------------+-------------+---------+------------+---------------+------------|
| Standby    |                    |             | Switch  |            |               |            |
|------------+--------------------+-------------+---------+------------+---------------+------------|
| Running    | Preempted          |             |         | Terminate  | Block/suspend |            |
|------------+--------------------+-------------+---------+------------+---------------+------------|
| Terminated |                    |             |         |            |               |            |
|------------+--------------------+-------------+---------+------------+---------------+------------|
| Waiting    | Unblock/resume     |             |         |            |               | Unblock    |
|            | Resource available |             |         |            |               |            |
|------------+--------------------+-------------+---------+------------+---------------+------------|
| Transition | Resource availbale |             |         |            |               |            |
|------------+--------------------+-------------+---------+------------+---------------+------------|

** Affiniteetti
   Threadit voi toimia millä tahansa prosessorilla
   
   -Soft affiniteetti
     Pyrkii ajamaan samalla prosessorilla
   - Hard affiniteetti
     Pakko ajaa samalla prosessorilla
** LWP
   identifier
   prioriteetti
   signal mask
   käyttäjä rekisterit(tallennetut)
   kernel stack
   resource usage
   pointer vastaavaan kernel threadiin
   pointer prosessi struktuuriin
   
** Linux thread
   -Linux ei tunne eroa threadin ja prosessin välillä
   -ULT on mapped to kernel level prosesseihin
   -Uus prosessi luodaan kopsaamalla nykysen prosessin attribuutit 
   -uus voidaan kloonata siten et resourses jaetaan
   -clone() luo erillisen stackin joka prosessille
  
** MAC OSX
*** Mac OSX Grand Central Dispatch (GCD)
   pool of available threads
   suunnitteljat voi tehä kivoja paloja, jotka voidaan rinnakkaistaa
*** MAC OSX Block
    -Ei kai kiinnosta ketään

* TODO Luento 5
** Termejä
   -Atominen operaatio
   -Kriittinen vaihe - critical section
     Alue, jossa useampi prosessi samanaikaisesti rikkoo jotain
   -Deadlock - lukkiutuminen
     tilanne kun N prosessi ei voi jatkaa kin no odottavat toisiaan
   -Livelock - elolukko
     Prosessien tilat vaihtivat toistensa takia, eivät tee mitään
   järkevää
   -poissulkemisongelma - mutex
   -race condition, käpistellään yhteistä asiaa, ja tulos riippuu
     prosessien ajotuksista
   -nälkiintyminen
    prosessia ei koskaan valita
** Rinnakkaisuus
** Race condition
** Critical section
** Mutex - mutual exclusion
*** mutex ratkaisuja
**** SW
     vaatii jaettua muistia, joku lukko joka kertoo kuka käyttää
**** HW
     Compare&swap  konekäskyt
** Synkronisaatio
** TODO Busy Wait 
* Luento 6
** TODO Semafora
*** Vain 3 toimintoa
    1) voidaan initialisoida positiiviseks integeriks
    2) semWait() pienentää arvoa
    3) semSignal() kasvattaa arvoa
**** Seuraukset
     -Ei voida tietää, blokkaako semafora ennen ko. komentoa
     -Ei voida tietää, mikä prosessi jatkaa heti
     uniprosessorisysteemilla, kun 2 prosessii toimii rinnakkain
     -Ei tarvitse tietää, mikäli joku
**** Vahva semafora
     Seisottaa prosessit jonossa
**** Heikki semafora
     Ei väliä, ei takaa vapautusjärjestystä
*** Binäärisemafora
    semafora, mutta vaan 2 tilaa, 0 ja 1
** Mutex 
   Binääärisemafora, mutta sama prosessi lukitsee ja avaa

** Monitor
   ohjelmointikelen feature, joka mahdollistaa vain yhde käyttävän
   metodia samanaikasesti
** Mailbox
   Voi kommunikoida erilaisilla viesteillä
** Spinlock 
   Mutex feature, jolla suoritetaan ikuinen loop, odotettaessa
   mutexin avautumista
** Rio ongelmat
*** Producer Consumer
**** General situation
     -yksi tai useampi tuottaja, asettaa sitä bfferiin
     -on yksi kuluttaja ottamassa kamaa kerrallaan pois
     -vain yksi cons/prod kerralla ottamassa kamaa ulos
**** The problem
     -huolehdi, että producer ei voi lisätä kamaa täyteen bufferiin,
     ja että consumer ei voi ottaa kamaa tyhjästä bufferista
